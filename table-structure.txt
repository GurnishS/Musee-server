create table public.users (
  user_id uuid not null default gen_random_uuid (),
  name text not null,
  subscription_type public.subscription_type null default 'free'::subscription_type,
  plan_id uuid null,
  avatar_url text null default 'https://xvpputhovrhgowfkjhfv.supabase.co/storage/v1/object/public/avatars/users/default_avatar.png'::text,
  playlists uuid[] null default '{}'::uuid[],
  favorites jsonb null default '{}'::jsonb,
  followers_count integer null default 0,
  followings_count integer null default 0,
  last_login_at timestamp without time zone null,
  settings jsonb null default '{}'::jsonb,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  user_type public.user_type null default 'listener'::user_type,
  email text not null,
  constraint users_pkey primary key (user_id),
  constraint users_email_key unique (email),
  constraint users_plan_id_fkey foreign KEY (plan_id) references plans (plan_id),
  constraint users_user_id_fkey foreign KEY (user_id) references auth.users (id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;


create table public.artists (
  artist_id uuid not null default gen_random_uuid (),
  bio text null,
  cover_url text null default 'https://xvpputhovrhgowfkjhfv.supabase.co/storage/v1/object/public/covers/artists/default_cover.png'::text,
  genres text[] null default '{}'::text[],
  debut_year integer null,
  is_verified boolean null default false,
  social_links jsonb null default '{}'::jsonb,
  monthly_listeners integer null default 0,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  region_id uuid not null default gen_random_uuid (),
  date_of_birth date null,
  constraint artists_pkey primary key (artist_id),
  constraint artists_artist_id_fkey foreign KEY (artist_id) references users (user_id) on update CASCADE on delete CASCADE,
  constraint artists_region_id_fkey foreign KEY (region_id) references regions (region_id) on update CASCADE on delete set null
) TABLESPACE pg_default;

create trigger set_user_type_to_artist
after INSERT on artists for EACH row
execute FUNCTION handle_artist_user_type_changes ();

create trigger set_user_type_to_listener
after DELETE on artists for EACH row
execute FUNCTION handle_artist_user_type_changes ();


create table public.albums (
  album_id uuid not null default gen_random_uuid (),
  title text not null,
  artist_id uuid null,
  release_date date null,
  description text null,
  cover_url text null,
  genres text[] null default '{}'::text[],
  total_tracks integer null default 0,
  likes_count integer null default 0,
  play_count bigint null default 0,
  track_ids uuid[] null default '{}'::uuid[],
  duration interval null,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  is_published boolean null default false,
  constraint albums_pkey primary key (album_id),
  constraint albums_artist_id_fkey foreign KEY (artist_id) references artists (artist_id) on delete CASCADE
) TABLESPACE pg_default;


create table public.playlists (
  playlist_id uuid not null default gen_random_uuid (),
  name text not null,
  creator_id uuid null,
  is_public boolean null default true,
  description text null,
  cover_url text null,
  genres text[] null default '{}'::text[],
  likes_count bigint null,
  total_tracks integer null default 0,
  track_ids uuid[] null default '{}'::uuid[],
  play_count bigint null default 0,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  duration integer null,
  constraint playlists_pkey primary key (playlist_id),
  constraint playlists_creator_id_fkey foreign KEY (creator_id) references users (user_id) on delete CASCADE
) TABLESPACE pg_default;

create table public.regions (
  region_id uuid not null default gen_random_uuid (),
  created_at timestamp with time zone not null default now(),
  code text not null,
  name text not null,
  country_id uuid not null default gen_random_uuid (),
  constraint regions_pkey primary key (region_id),
  constraint regions_code_key unique (code),
  constraint regions_country_id_fkey foreign KEY (country_id) references countries (country_id) on update CASCADE on delete CASCADE
) TABLESPACE pg_default;


create table public.countries (
  country_id uuid not null default gen_random_uuid (),
  code text not null,
  name text not null,
  created_at timestamp with time zone not null default now(),
  constraint countries_pkey primary key (country_id),
  constraint countries_code_key unique (code)
) TABLESPACE pg_default;


create table public.tracks (
  track_id uuid not null default gen_random_uuid (),
  title text not null,
  artist_ids uuid[] null default '{}'::uuid[],
  album_id uuid null,
  release_date date null,
  cover_url text not null,
  genres text[] null default '{}'::text[],
  audio_files jsonb null,
  lyrics_url text null,
  duration interval null,
  play_count bigint null default 0,
  is_explicit boolean null default false,
  likes_count integer null default 0,
  popularity_score double precision null default 0,
  created_at timestamp without time zone null default now(),
  updated_at timestamp without time zone null default now(),
  video_url text null,
  is_published boolean null default false,
  constraint tracks_pkey primary key (track_id),
  constraint tracks_album_id_fkey foreign KEY (album_id) references albums (album_id) on delete CASCADE,
  constraint check_audio_before_publish check (
    (
      (is_published = false)
      or (
        (is_published = true)
        and (audio_files is not null)
      )
    )
  )
) TABLESPACE pg_default;